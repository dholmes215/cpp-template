name: Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
        - { Name: Windows VS2019, os: windows-2019, cc: cl.exe,    cxx: cl.exe }
        - { Name: Linux GCC,      os: ubuntu-20.04, cc: gcc-10,    cxx: g++-10 }
        - { Name: Linux Clang,    os: ubuntu-20.04, cc: clang-12,  cxx: clang++-12 }
        - { Name: MacOS Clang,    os: macos-10.15,  cc: clang,     cxx: clang++ }
        build_type: [Release, Debug]

    env:
      CC: ${{ matrix.platform.cc }}
      CXX: ${{ matrix.platform.cxx }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add msbuild to PATH
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Log VS installation info
      if: runner.os == 'Windows'
      run: vswhere -all -prerelease

    - name: Log CMake version
      run: cmake --version

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DWARNINGS_AS_ERRORS=ON

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build_type }}

    - name: Setup OpenCppCoverage and add to PATH
      if: runner.os == 'Windows' && matrix.build_type == 'Debug'
      id: setup_opencppcoverage
      run: |
        choco install OpenCppCoverage -y
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH
    - name: Generate Report
      if: runner.os == 'Windows' && matrix.build_type == 'Debug'
      id: generate_test_report
      shell: cmd
      working-directory: ${{github.workspace}}/build
      # TODO: Don't hard-code cpp-template path
      run: OpenCppCoverage.exe --sources cpp-template\src --export_type cobertura:${{github.workspace}}\build\coverage.xml --cover_children --verbose -- ctest -C ${{ matrix.build_type }}
    - name: Print coverage.xml
      if: runner.os == 'Windows' && matrix.build_type == 'Debug'
      run: type ${{github.workspace}}\build\coverage.xml
    - name: Upload Report to Codecov
      if: runner.os == 'Windows' && matrix.build_type == 'Debug'
      uses: codecov/codecov-action@v1.3.2
      with:
        # XXX For some reason CodeCov doesn't like (unescaped?) windows path separators.
        # TODO Try to use the absolute path either by escaping properly or convering `\` to `/`
        files: ./build/coverage.xml
        fail_ci_if_error: true
        functionalities: fix
